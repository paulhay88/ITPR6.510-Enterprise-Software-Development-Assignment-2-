// Useful Resources:
https://golang.org/doc/articles/wiki/

Tables:
- Users
- - id, name, email, phone, password
- Rooms
- - id, name
- Meetings
- - id, date & time, roomID, topic, agenda, ownerID
- - participants will be own table and will be imported for info
- PriorMeetings
- - id, meetingID, userID
- - once meeting is created it can be chosen as a template
- - prior info will be gotten from meeting selected

- Pivot tables:
- - Participants
- - id, meetingID, usersID



Functions:
- Create meeting
- Change meeting
- Read and edit agenda
- Find meeting
- Analyse agendas
- Create account
- Login
- Save User settings



// TODO:
- Routing
- Create functionality
- Cookies for login authentication
- Login
- Permissions

- Functionality


- Output data in json format
- Possibly save agenda in different format. Json file(?). Database links to json file.

- Read chapter 3 onwards


// Routing:
- Meetings, Rooms, users, priormeetings, participants
- - Get
- - Post - create new
- - Put - update
- - Delete


localhost:9090/
(either redirects to login page or outputs meetings as homepage)

- GET - retrieve all/query meetings
- POST - create meeting
- PUT - update meeting
- DELETE - delete meeting

---------------

Meeting Planner Routing:

/login
/signup
Validate users and passwords 
	Create cookies

Pass login, username and password in json format - POST
Check and redirect  
Overview:
/  
/:meetingID


Users:
/users/create // same as signup
/users/:id/settings

Rooms:

Meeting:
/meeting/create
/meeting/:id/edit  //all fields available in Form to edit same page with greyed out info for participants that cant change time or date
/meeting/search
/meeting/results
Meeting topic
Participants
Agenda	


Database struct
	

Data flow:

Database => struct => json => output
Input => json => struct => database


--------

Useful information:

"There are many methods you can use to communicate with servers in HTTP; GET, POST, PUT and DELETE are the 4 basic methods that we typically use. A URL represents a resource on a network, so these 4 methods define the query, change, add and delete operations that can act on these resources. GET and POST are very commonly used in HTTP. GET can append query parameters to the URL, using ? to separate the URL and parameters and & between the arguments, like EditPosts.aspx?name=test1&id=123456. POST puts data in the request body because the URL implements a length limitation via the browser. Thus, POST can submit much more data than GET. Also, when we submit user names and passwords, we don't want this kind of information to appear in the URL, so we use POST to keep them invisible."

Router:
https://astaxie.gitbooks.io/build-web-application-with-golang/content/en/03.4.html

RESTful Services:
https://www.youtube.com/watch?v=SLwpqD8n3d0

JSON and REST:
https://golangvedu.wordpress.com/2017/01/24/using-mysql-and-json-with-golang-small-tutorial/


------------------------------

Difference between post and put:

- Post is not idempotent.  It does not automatically create or repace a resource if the resource  does not exist.
- Put is idempotent. Will create or overwrite any resource.

- Both can be used to modify or create. Idempotency should be kept in mind.

---------------------------------

Workload split up:

Paul
- Find a meeting
- Analyse agendas
- Login

Kassian
- Read and/or edit agenda
- Change booking
- User settings
- Ability to see and update participants

- Add participants
- Create room if roomname does not exist
- Add tests

- Add run down of every route with all possible inputs